#ifndef ABSYN_HEADER
#define ABSYN_HEADER
#include "conf/Translator_config.h"
/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef int String;
typedef int Ident;
typedef int MyToken;
typedef int Przerwa;


/********************   Forward Declarations    ********************/

struct QueryList_;
typedef struct QueryList_ *QueryList;
struct QueryLineList_;
typedef struct QueryLineList_ *QueryLineList;
struct SpaceList_;
typedef struct SpaceList_ *SpaceList;
struct ComplexQuery_;
typedef struct ComplexQuery_ *ComplexQuery;
struct Query_;
typedef struct Query_ *Query;
struct QueryLine_;
typedef struct QueryLine_ *QueryLine;
struct Expr_;
typedef struct Expr_ *Expr;
typedef int Text;
typedef int Name;


/********************   Abstract Syntax Classes    ********************/

struct ComplexQuery_
{
    QueryList querylist_;
};

ComplexQuery make_ZapZloz(QueryList p0);

struct Query_
{
  enum { is_ZapProste, is_ZapDef, is_ZapWyw, is_ZapPuste } kind;
  union
  {
    struct { QueryLine tabliniazapytania_[MAX_POL];} zapproste_;
    struct { Query zapytanie_;Name nazwa_;} zapdef_;
    struct { Query zapytanie_;Name nazwa_;} zapwyw_;
  } u;
};

Query make_ZapProste(QueryLineList p0, SpaceList p1);
Query make_ZapDef(Query p0, Name p1, SpaceList p2);
Query make_ZapWyw(Query p0, Name p1, SpaceList p2);
Query make_ZapPuste(SpaceList p0);

struct QueryLine_
{
  Ident ident_;
  Expr wyraz_;
};

QueryLine make_LiniaZap(Ident p0, Expr p1);

struct Expr_
{
  enum { is_WyrazAnd, is_WyrazOr, is_WyrazNeg, is_WyrazFrag, is_WyrazFragL, is_WyrazFragP, is_WyrazTekst } kind;
  union
  {
    struct { Expr wyraz_1, wyraz_2; } wyrazand_;
    struct { Expr wyraz_1, wyraz_2; } wyrazor_;
    struct { Expr wyraz_; } wyrazneg_;
    struct { Text tekst_1, tekst_2; } wyrazfrag_;
    struct { Text tekst_; } wyrazfragl_;
    struct { Text tekst_; } wyrazfragp_;
    struct { Text tekst_; } wyraztekst_;
  } u;
};

Expr make_WyrazAnd(Expr p0, Expr p1);
Expr make_WyrazOr(Expr p0, Expr p1);
Expr make_WyrazNeg(Expr p0);
Expr make_WyrazFrag(Text p0, Text p1);
Expr make_WyrazFragL(Text p0);
Expr make_WyrazFragP(Text p0);
Expr make_WyrazTekst(Text p0);

struct QueryList_
{
  Query zapytanie_;
  QueryList listzapytanie_;
};

QueryList make_ListZapytanie(Query p1, QueryList p2);
struct QueryLineList_
{
  QueryLine liniazapytania_;
  //LiniaZapytania liniazapytaniatab[MAX_POL];
  QueryLineList listliniazapytania_;
};

QueryLineList make_ListLiniaZapytania(QueryLine p1, QueryLineList p2);


struct SpaceList_
{
  int przerwa_;
  SpaceList listprzerwa_;
};

SpaceList make_ListPrzerwa(int p1, SpaceList p2);


Text make_Tekst(int p0);


Name make_Nazwa(String p0);



#endif
