#ifndef ABSYN_HEADER
#define ABSYN_HEADER
#include "conf/Translator_config.h"
/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef int String;
typedef int Ident;
typedef int MyToken;
typedef int Przerwa;


/********************   Forward Declarations    ********************/

struct QueryList_;
typedef struct QueryList_ *QueryList;
struct QueryLineList_;
typedef struct QueryLineList_ *QueryLineList;
struct SpaceList_;
typedef struct SpaceList_ *SpaceList;
struct ComplexQuery_;
typedef struct ComplexQuery_ *ComplexQuery;
struct Query_;
typedef struct Query_ *Query;
struct QueryLine_;
typedef struct QueryLine_ *QueryLine;
struct Expr_;
typedef struct Expr_ *Expr;
typedef int Text;
typedef int Name;


/********************   Abstract Syntax Classes    ********************/

struct ComplexQuery_
{
    QueryList querylist_;
};

ComplexQuery make_ComplexQuery(QueryList p0);

struct Query_
{
  enum { is_SingleQuery, is_DefQuery, is_CallQuery, is_EmptyQuery } kind;
  union
  {
    struct { QueryLine tabqueryline_[MAX_POL];} simplequery_;
    struct { Query query_;Name name_;} defquery_;
    struct { Query query_;Name name_;} callquery_;
  } u;
};

Query make_SimpleQuery(QueryLineList p0, SpaceList p1);
Query make_DefQuery(Query p0, Name p1, SpaceList p2);
Query make_CallQuery(Query p0, Name p1, SpaceList p2);
Query make_EmptyQuery(SpaceList p0);

struct QueryLine_
{
  Ident ident_;
  Expr expr_;
};

QueryLine make_QueryLine(Ident p0, Expr p1);

struct Expr_
{
  enum { is_AndExpr, is_OrExpr, is_NotExpr, is_PartExpr, is_LPartExpr, is_RPartExpr, is_TextExpr } kind;
  union
  {
    struct { Expr expr_1, expr_2; } andexpr_;
    struct { Expr expr_1, expr_2; } orexpr_;
    struct { Expr expr_; } notexpr_;
    struct { Text text_1, text_2; } partexpr_;
    struct { Text text_1; } lpartexpr_;
    struct { Text text_; } rpartexpr_;
    struct { Text text_; } textexpr_;
  } u;
};

Expr make_AndExpr(Expr p0, Expr p1);
Expr make_OrExpr(Expr p0, Expr p1);
Expr make_NotExpr(Expr p0);
Expr make_PartExpr(Text p0, Text p1);
Expr make_LPartExpr(Text p0);
Expr make_RPartExpr(Text p0);
Expr make_TextExpr(Text p0);

struct QueryList_
{
  Query query_;
  QueryList querylist_;
};

QueryList make_QueryList(Query p1, QueryList p2);
struct QueryLineList_
{
  QueryLine queryline_;
  //QueryLine liniazapytaniatab[MAX_POL];
  QueryLineList querylinelist_;
};

QueryLineList make_QueryLineList(QueryLine p1, QueryLineList p2);


struct SpaceList_
{
  int space_;
  SpaceList spacelist_;
};

SpaceList make_SpaceList(int p1, SpaceList p2);


Text make_Text(int p0);


Name make_Name(String p0);



#endif
