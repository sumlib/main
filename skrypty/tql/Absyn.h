#ifndef ABSYN_HEADER
#define ABSYN_HEADER
#include "conf/Translator_config.h"
/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef int String;
typedef int Ident;
typedef int MyToken;
typedef int Przerwa;


/********************   Forward Declarations    ********************/

struct QueryList_;
typedef struct QueryList_ *QueryList;
struct QueryLineList_;
typedef struct QueryLineList_ *QueryLineList;
struct SpaceList_;
typedef struct SpaceList_ *SpaceList;
struct ComplexQuery_;
typedef struct ComplexQuery_ *ComplexQuery;
struct Query_;
typedef struct Query_ *Query;
struct QueryLine_;
typedef struct QueryLine_ *QueryLine;
struct Part_;
typedef struct Part_ *Part;
struct LPart_;
typedef struct LPart_ *LPart;
struct RPart_;
typedef struct RPart_ *RPart;
struct LPartList_;
typedef struct LPartList_ *LPartList;
struct RPartList_;
typedef struct RPartList_ *RPartList;
struct Expr_;
typedef struct Expr_ *Expr;
typedef int Text;
typedef int Name;


typedef enum { is_SingleQuery, is_DefQuery, is_CallQuery, is_SimpleCallQuery, is_EmptyQuery } QueryKind;

/********************   Abstract Syntax Classes    ********************/

struct ComplexQuery_
{
    QueryList querylist_;
};

ComplexQuery make_ComplexQuery(QueryList p0);

struct Query_
{
  QueryKind kind;
  union
  {
    struct { QueryLine tabqueryline_[MAX_POL];} simplequery_;
    struct { Query query_;Name name_;} defquery_;
    struct { Query query_;Name name_;} callquery_;
    struct { Name name_;} simplecallquery_;
  } u;
};

Query make_SimpleQuery(QueryLineList p0, SpaceList p1);
Query make_DefQuery(Query p0, Name p1, SpaceList p2);
Query make_CallQuery(Query p0, Name p1, SpaceList p2);
Query make_SimpleCallQuery(Name p1, SpaceList p2);
Query make_EmptyQuery(SpaceList p0);

struct QueryLine_
{
  Ident ident_;
  Expr expr_;
};

QueryLine make_QueryLine(Ident p0, Expr p1);

typedef enum { is_AndExpr, is_OrExpr, is_NotExpr, is_PartExpr, is_LPartExpr, is_RPartExpr, is_TextExpr } ExprKind;

struct Expr_
{
  ExprKind kind;
  union
  {
    struct { Expr expr_1, expr_2; } andexpr_;
    struct { Expr expr_1, expr_2; } orexpr_;
    struct { Expr expr_; } notexpr_;
    struct { Part part; } partexpr_;
  } u;
};

Expr make_AndExpr(Expr p0, Expr p1);
Expr make_OrExpr(Expr p0, Expr p1);
Expr make_NotExpr(Expr p0);
Expr make_PartExpr(Part p);


struct LPart_
{
    Text text;
};

LPart make_LPart(Text t);

struct RPart_
{
    Text text;
};

RPart make_RPart(Text t);

struct LPartList_
{
    LPart lpart_;
    LPartList lpartlist_;
};

LPartList make_LPartList(LPart p, LPartList l);

struct RPartList_
{
    RPart rpart_;
    RPartList rpartlist_;
};

RPartList make_RPartList(RPart p, RPartList l);

typedef enum { is_MiddleStarPart, is_RightStarPart, is_LeftStarPart, is_BothStarPart } PartKind;

struct Part_
{
  PartKind kind;
  union
  {
    struct { Text text_; RPartList rpartlist_; } middlestar_;
    struct { Text text_; LPartList lpartlist_; } rightstar_;
    struct { Text text_; RPartList rpartlist_; } leftstar_;
    struct { Text text_; LPartList lpartlist_; } bothstar_;
  } u;
};

Part make_MiddleStarPart(Text t, RPartList l);
Part make_RightStarPart(Text t, LPartList l);
Part make_LeftStarPart(Text t, RPartList l);
Part make_BothStarPart(Text t, LPartList l);



struct QueryList_
{
  Query query_;
  QueryList querylist_;
};

QueryList make_QueryList(Query p1, QueryList p2);
struct QueryLineList_
{
  QueryLine queryline_;
  //QueryLine liniazapytaniatab[MAX_POL];
  QueryLineList querylinelist_;
};

QueryLineList make_QueryLineList(QueryLine p1, QueryLineList p2);


struct SpaceList_
{
  int space_;
  SpaceList spacelist_;
};

SpaceList make_SpaceList(int p1, SpaceList p2);


Text make_Text(int p0);


Name make_Name(String p0);



#endif
