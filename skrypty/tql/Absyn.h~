#ifndef ABSYN_HEADER
#define ABSYN_HEADER
#include "conf/Translator_config.h";
/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef int String;
typedef int Ident;
typedef int MyToken;
typedef int Przerwa;


/********************   Forward Declarations    ********************/

struct ListZapytanie_;
typedef struct ListZapytanie_ *ListZapytanie;
struct ListLiniaZapytania_;
typedef struct ListLiniaZapytania_ *ListLiniaZapytania;
struct ListPrzerwa_;
typedef struct ListPrzerwa_ *ListPrzerwa;
struct ZapZloz_;
typedef struct ZapZloz_ *ZapZloz;
struct Zapytanie_;
typedef struct Zapytanie_ *Zapytanie;
struct LiniaZapytania_;
typedef struct LiniaZapytania_ *LiniaZapytania;
struct Wyraz_;
typedef struct Wyraz_ *Wyraz;
typedef int Tekst;
typedef int Nazwa;


/********************   Abstract Syntax Classes    ********************/

struct ZapZloz_
{
    ListZapytanie listzapytanie_;
};

ZapZloz make_ZapZloz(ListZapytanie p0);

struct Zapytanie_
{
  enum { is_ZapProste, is_ZapDef, is_ZapWyw, is_ZapPuste } kind;
  union
  {
    struct { LiniaZapytania tabliniazapytania_[MAX_POL];} zapproste_;
    struct { Zapytanie zapytanie_;Nazwa nazwa_;} zapdef_;
    struct { Zapytanie zapytanie_;Nazwa nazwa_;} zapwyw_;
  } u;
};

Zapytanie make_ZapProste(ListLiniaZapytania p0, ListPrzerwa p1);
Zapytanie make_ZapDef(Zapytanie p0, Nazwa p1, ListPrzerwa p2);
Zapytanie make_ZapWyw(Zapytanie p0, Nazwa p1, ListPrzerwa p2);
Zapytanie make_ZapPuste(ListPrzerwa p0);

struct LiniaZapytania_
{
  Ident ident_;
  Wyraz wyraz_;
};

LiniaZapytania make_LiniaZap(Ident p0, Wyraz p1);

struct Wyraz_
{
  enum { is_WyrazAnd, is_WyrazOr, is_WyrazNeg, is_WyrazFrag, is_WyrazFragL, is_WyrazFragP, is_WyrazTekst } kind;
  union
  {
    struct { Wyraz wyraz_1, wyraz_2; } wyrazand_;
    struct { Wyraz wyraz_1, wyraz_2; } wyrazor_;
    struct { Wyraz wyraz_; } wyrazneg_;
    struct { Tekst tekst_1, tekst_2; } wyrazfrag_;
    struct { Tekst tekst_; } wyrazfragl_;
    struct { Tekst tekst_; } wyrazfragp_;
    struct { Tekst tekst_; } wyraztekst_;
  } u;
};

Wyraz make_WyrazAnd(Wyraz p0, Wyraz p1);
Wyraz make_WyrazOr(Wyraz p0, Wyraz p1);
Wyraz make_WyrazNeg(Wyraz p0);
Wyraz make_WyrazFrag(Tekst p0, Tekst p1);
Wyraz make_WyrazFragL(Tekst p0);
Wyraz make_WyrazFragP(Tekst p0);
Wyraz make_WyrazTekst(Tekst p0);

struct ListZapytanie_
{
  Zapytanie zapytanie_;
  ListZapytanie listzapytanie_;
};

ListZapytanie make_ListZapytanie(Zapytanie p1, ListZapytanie p2);
struct ListLiniaZapytania_
{
  LiniaZapytania liniazapytania_;
  //LiniaZapytania liniazapytaniatab[MAX_POL];
  ListLiniaZapytania listliniazapytania_;
};

ListLiniaZapytania make_ListLiniaZapytania(LiniaZapytania p1, ListLiniaZapytania p2);


struct ListPrzerwa_
{
  int przerwa_;
  ListPrzerwa listprzerwa_;
};

ListPrzerwa make_ListPrzerwa(int p1, ListPrzerwa p2);


Tekst make_Tekst(int p0);


Nazwa make_Nazwa(String p0);



#endif
