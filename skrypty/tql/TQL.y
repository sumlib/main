/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.h"
#include "Symbols.h"
#define initialize_lexer TQL_initialize_lexer
#define YY_parse_ERROR_VERBOSE 1
extern int yyparse(void);
extern int yylex(void);
extern int initialize_lexer(FILE * inp);
int yyline = 1;

void yyerror(const char *str)
{
  fprintf(stderr,"error in line %d: %s\n", yyline, str);
}

ComplexQuery YY_RESULT_ComplexQuery_ = 0;
ComplexQuery pComplexQuery(FILE *inp)
{
  symbols_init();
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ComplexQuery_;
  }
}

Query YY_RESULT_Query_ = 0;
Query pQuery(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Query_;
  }
}

QueryLine YY_RESULT_QueryLine_ = 0;
QueryLine pQueryLine(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_QueryLine_;
  }
}

Expr YY_RESULT_Expr_ = 0;
Expr pExpr(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

QueryList YY_RESULT_QueryList_ = 0;
QueryList pQueryList(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_QueryList_;
  }
}

QueryLineList YY_RESULT_QueryLineList_ = 0;
QueryLineList pQueryLineList(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_QueryLineList_;
  }
}

int YY_RESULT_Space_ = 0;
int pSpace(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Space_;
  }
}

SpaceList YY_RESULT_SpaceList_ = 0;
SpaceList pSpaceList(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_SpaceList_;
  }
}

Text YY_RESULT_Text_ = 0;
Text pText(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Text_;
  }
}

Name YY_RESULT_Name_ = 0;
Name pName(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Name_;
  }
}


QueryList reverseQueryList(QueryList l)
{
  QueryList prev = 0;
  QueryList tmp = 0;
  while (l)
  {
    tmp = l->querylist_;
    l->querylist_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
QueryLineList reverseQueryLineList(QueryLineList l)
{
  QueryLineList prev = 0;
  QueryLineList tmp = 0;
  while (l)
  {
    tmp = l->querylinelist_;
    l->querylinelist_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
SpaceList reverseSpaceList(SpaceList l)
{
  SpaceList prev = 0;
  SpaceList tmp = 0;
  while (l)
  {
    tmp = l->spacelist_;
    l->spacelist_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

%}

%union
{
  int int_;
  char char_;
  double double_;
  int string_;
  ComplexQuery complexquery_;
  Query query_;
  QueryLine queryline_;
  Expr expr_;
  QueryList querylist_;
  QueryLineList querylinelist_;
  int space_;
  SpaceList spacelist_;
  Text text_;
  Name name_;

}

%token _ERROR_
%token _SYMB_NEWLINE    /*   \n   */
%token _SYMB_COLON    /*   :   */
%token _SYMB_AND    /*   +   */
%token _SYMB_OR    /*   /   */
%token _SYMB_NOT    /*   --   */
%token _SYMB_STAR    /*   *   */
%token _SYMB_LBRACKET    /*   (   */
%token _SYMB_RBRACKET    /*   )   */
%token _SYMB_AS    /*   as   */
%token _SYMB_DEFINE    /*   define   */
%token _SYMB_IN    /*   in   */
%token _SYMB_SEARCH    /*   search   */
%token<string_> _SYMB_DIGIT_IDENT    /*   MyToken   */

%type <complexquery_> ComplexQuery
%type <query_> Query
%type <queryline_> QueryLine
%type <expr_> Expr
%type <expr_> Expr1
%type <expr_> Expr2
%type <querylist_> QueryList
%type <querylinelist_> QueryLineList
%type <space_> Space
%type <spacelist_> SpaceList
%type <text_> Text
%type <name_> Name

%token<string_> _STRING_
%token<string_> _IDENT_

%%
ComplexQuery : QueryList { $$ = make_ComplexQuery($1); YY_RESULT_ComplexQuery_= $$; }
;
Query : QueryLineList SpaceList { $$ = make_SimpleQuery($1, reverseSpaceList($2)); YY_RESULT_Query_= $$; }
  | _SYMB_DEFINE _SYMB_NEWLINE Query _SYMB_AS Name SpaceList { $$ = make_DefQuery($3, $5, reverseSpaceList($6)); YY_RESULT_Query_= $$; }
  | _SYMB_SEARCH _SYMB_NEWLINE Query _SYMB_IN Name SpaceList { $$ = make_CallQuery($3, $5, reverseSpaceList($6)); YY_RESULT_Query_= $$; }
  | SpaceList { $$ = make_EmptyQuery(reverseSpaceList($1)); YY_RESULT_Query_= $$; }
;
QueryLine : _IDENT_ _SYMB_DWUKROPEK Expr { $$ = make_QueryLine($1, $3); YY_RESULT_QueryLine_= $$; }
;
Expr : Expr _SYMB_AND Expr1 { $$ = make_AndExpr($1, $3); YY_RESULT_Expr_= $$; }
  | Expr _SYMB_OR Expr1 { $$ = make_OrExpr($1, $3); YY_RESULT_Expr_= $$; }
  | Expr _SYMB_NOT Expr1 { $$ = make_AndExpr($1, make_NotExpr($3)); YY_RESULT_Expr_= $$; }
  | Expr1 { $$ = $1; YY_RESULT_Expr_= $$; }
;
Expr1 : _SYMB_NOT Expr1 { $$ = make_NotExpr($2); YY_RESULT_Expr_= $$; }
  | Expr2 { $$ = $1; YY_RESULT_Expr_= $$; }
;
Expr2 : Text _SYMB_ALL Text { $$ = make_PartExpr($1, $3); YY_RESULT_Expr_= $$; }
  | Text _SYMB_ALL { $$ = make_LPartExpr($1); YY_RESULT_Expr_= $$; }
  | _SYMB_ALL Text { $$ = make_RPartExpr($2); YY_RESULT_Expr_= $$; }
  | Text { $$ = make_TextExpr($1); YY_RESULT_Expr_= $$; }
  | _SYMB_LEWIAS Expr _SYMB_PRAWIAS { $$ = $2; YY_RESULT_Expr_= $$; }
;
QueryList : Query { $$ = make_QueryList($1, 0); YY_RESULT_QueryList_= $$; }
  | Query QueryList { $$ = make_QueryList($1, $2); YY_RESULT_QueryList_= $$; }
;
QueryLineList : QueryLine _SYMB_NEWLINE { $$ = make_QueryLineList($1, 0); YY_RESULT_QueryLineList_= $$; }
  | QueryLine _SYMB_NEWLINE QueryLineList { $$ = make_QueryLineList($1, $3); YY_RESULT_QueryLineList_= $$; }
;
Space : _SYMB_NEWLINE { $$ = 1; YY_RESULT_Space_= $$; }
;
SpaceList : /* empty */ { $$ = 0; YY_RESULT_SpaceList_= $$; }
  | SpaceList Space { $$ = make_SpaceList($2, $1); YY_RESULT_SpaceList_= $$; }
;
Text : _STRING_ { $$ = make_Text($1); YY_RESULT_Text_= $$; }
  | _IDENT_ { $$ = make_Text($1); YY_RESULT_Text_= $$; }
  | _SYMB_DWUKROPEK2 { $$ = make_Text($1); YY_RESULT_Text_= $$; }
;
Name : _STRING_ { $$ = make_Name($1); YY_RESULT_Name_= $$; }
;


