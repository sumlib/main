# 1 "semLexer.mll"
 
(********************************************************)
(*                                                      *)
(*  Copyright 2007 Wojciech Jaworski.                   *)
(*                                                      *)
(*  All rights reserved.                                *)
(*                                                      *)
(********************************************************)

exception Fail of string;;

open SemParser;;

# 16 "semLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\222\255\223\255\012\000\225\255\226\255\000\000\000\000\
    \000\000\001\000\000\000\000\000\003\000\001\000\009\000\001\000\
    \249\255\250\255\251\255\252\255\253\255\254\255\255\255\247\255\
    \002\000\248\255\001\000\006\000\246\255\009\000\002\000\014\000\
    \000\000\245\255\009\000\001\000\010\000\013\000\003\000\018\000\
    \026\000\243\255\020\000\002\000\005\000\015\000\000\000\035\000\
    \034\000\022\000\030\000\026\000\020\000\023\000\241\255\042\000\
    \041\000\040\000\240\255\001\000\043\000\232\255\035\000\040\000\
    \031\000\031\000\231\255\048\000\056\000\052\000\048\000\051\000\
    \050\000\040\000\042\000\239\255\051\000\058\000\065\000\062\000\
    \046\000\052\000\059\000\050\000\046\000\238\255\068\000\237\255\
    \055\000\065\000\061\000\069\000\236\255\057\000\073\000\061\000\
    \235\255\062\000\068\000\074\000\078\000\065\000\234\255\066\000\
    \086\000\064\000\233\255\080\000\076\000\084\000\093\000\081\000\
    \085\000\076\000\076\000\098\000\097\000\096\000\097\000\227\255\
    \096\000\098\000\094\000\101\000\104\000\086\000\102\000\109\000\
    \108\000\107\000\108\000\229\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\031\000\255\255\255\255\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\011\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\013\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\027\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\000\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\000\000\015\000\023\000\025\000\000\000\000\000\000\000\
    \019\000\018\000\000\000\000\000\020\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\021\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\036\000\014\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\000\000\016\000\000\000\047\000\
    \062\000\010\000\076\000\011\000\067\000\044\000\045\000\033\000\
    \099\000\008\000\027\000\031\000\039\000\009\000\093\000\042\000\
    \006\000\034\000\120\000\007\000\097\000\029\000\004\000\026\000\
    \005\000\098\000\028\000\030\000\032\000\035\000\037\000\038\000\
    \040\000\041\000\043\000\046\000\048\000\060\000\055\000\051\000\
    \052\000\053\000\054\000\056\000\057\000\058\000\061\000\063\000\
    \050\000\064\000\065\000\066\000\068\000\059\000\049\000\069\000\
    \070\000\071\000\072\000\073\000\074\000\075\000\077\000\078\000\
    \079\000\082\000\088\000\086\000\083\000\081\000\084\000\085\000\
    \087\000\089\000\090\000\091\000\092\000\094\000\095\000\096\000\
    \107\000\080\000\103\000\100\000\101\000\102\000\104\000\105\000\
    \106\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
    \115\000\116\000\117\000\118\000\119\000\121\000\122\000\123\000\
    \124\000\125\000\126\000\127\000\128\000\129\000\130\000\131\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\015\000\024\000\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\035\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\046\000\
    \059\000\000\000\009\000\000\000\010\000\043\000\044\000\032\000\
    \007\000\000\000\026\000\030\000\038\000\000\000\008\000\011\000\
    \000\000\012\000\006\000\000\000\007\000\013\000\000\000\014\000\
    \000\000\007\000\027\000\029\000\031\000\034\000\036\000\037\000\
    \039\000\040\000\042\000\045\000\047\000\048\000\049\000\050\000\
    \051\000\052\000\053\000\055\000\056\000\057\000\060\000\062\000\
    \047\000\063\000\064\000\065\000\067\000\048\000\047\000\068\000\
    \069\000\070\000\071\000\072\000\073\000\074\000\076\000\077\000\
    \078\000\079\000\080\000\081\000\082\000\079\000\083\000\084\000\
    \086\000\088\000\089\000\090\000\091\000\093\000\094\000\095\000\
    \097\000\079\000\098\000\099\000\100\000\101\000\103\000\104\000\
    \105\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
    \114\000\115\000\116\000\117\000\118\000\120\000\121\000\122\000\
    \123\000\124\000\125\000\126\000\127\000\128\000\129\000\130\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\015\000\024\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 16 "semLexer.mll"
                              ( token lexbuf )
# 187 "semLexer.ml"

  | 1 ->
# 17 "semLexer.mll"
                              ( SEMIC )
# 192 "semLexer.ml"

  | 2 ->
# 18 "semLexer.mll"
                              ( COMMA )
# 197 "semLexer.ml"

  | 3 ->
# 19 "semLexer.mll"
                              ( LPAREN )
# 202 "semLexer.ml"

  | 4 ->
# 20 "semLexer.mll"
                              ( RPAREN )
# 207 "semLexer.ml"

  | 5 ->
# 21 "semLexer.mll"
                              ( LBRACE )
# 212 "semLexer.ml"

  | 6 ->
# 22 "semLexer.mll"
                              ( RBRACE )
# 217 "semLexer.ml"

  | 7 ->
# 23 "semLexer.mll"
                              ( TEXT (let s = Lexing.lexeme lexbuf in String.sub s 1 (String.length s - 2)) )
# 222 "semLexer.ml"

  | 8 ->
# 24 "semLexer.mll"
                              ( TEXT "" )
# 227 "semLexer.ml"

  | 9 ->
# 25 "semLexer.mll"
                              ( UNIT )
# 232 "semLexer.ml"

  | 10 ->
# 26 "semLexer.mll"
                              ( STRING )
# 237 "semLexer.ml"

  | 11 ->
# 27 "semLexer.mll"
                              ( INT )
# 242 "semLexer.ml"

  | 12 ->
# 28 "semLexer.mll"
                              ( INTSTRING )
# 247 "semLexer.ml"

  | 13 ->
# 29 "semLexer.mll"
                              ( CONCAT )
# 252 "semLexer.ml"

  | 14 ->
# 30 "semLexer.mll"
                              ( CONCAT_MINUS )
# 257 "semLexer.ml"

  | 15 ->
# 31 "semLexer.mll"
                              ( CONCAT_SPACE )
# 262 "semLexer.ml"

  | 16 ->
# 32 "semLexer.mll"
                              ( ADD_DIGITS )
# 267 "semLexer.ml"

  | 17 ->
# 33 "semLexer.mll"
                              ( MAKE_CITY )
# 272 "semLexer.ml"

  | 18 ->
# 34 "semLexer.mll"
                              ( MAKE_GOD )
# 277 "semLexer.ml"

  | 19 ->
# 35 "semLexer.mll"
                              ( MAKE_STRING )
# 282 "semLexer.ml"

  | 20 ->
# 36 "semLexer.mll"
                              ( INTER )
# 287 "semLexer.ml"

  | 21 ->
# 37 "semLexer.mll"
                              ( SHIFT )
# 292 "semLexer.ml"

  | 22 ->
# 38 "semLexer.mll"
                              ( SYNTAX )
# 297 "semLexer.ml"

  | 23 ->
# 39 "semLexer.mll"
                              ( CONCAT_ACC )
# 302 "semLexer.ml"

  | 24 ->
# 40 "semLexer.mll"
                              ( CONCAT_AS_LIST )
# 307 "semLexer.ml"

  | 25 ->
# 41 "semLexer.mll"
                              ( PREDICATE )
# 312 "semLexer.ml"

  | 26 ->
# 42 "semLexer.mll"
                              ( PREDICATE_ACC )
# 317 "semLexer.ml"

  | 27 ->
# 43 "semLexer.mll"
                              ( STRING_LIST )
# 322 "semLexer.ml"

  | 28 ->
# 44 "semLexer.mll"
                              ( STRING_LIST_ACC )
# 327 "semLexer.ml"

  | 29 ->
# 45 "semLexer.mll"
                              ( X )
# 332 "semLexer.ml"

  | 30 ->
# 46 "semLexer.mll"
                              ( V )
# 337 "semLexer.ml"

  | 31 ->
# 47 "semLexer.mll"
                              ( INTTEXT (int_of_string (Lexing.lexeme lexbuf)) )
# 342 "semLexer.ml"

  | 32 ->
# 48 "semLexer.mll"
                              ( EOF )
# 347 "semLexer.ml"

  | 33 ->
# 49 "semLexer.mll"
                              ( raise (Fail ("lexer: illegal symbol: " ^ (Lexing.lexeme lexbuf))))
# 352 "semLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

