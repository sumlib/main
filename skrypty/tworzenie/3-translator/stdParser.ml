type token =
  | TERM of (string)
  | EOF
  | ESC
  | NEWLINE

open Parsing;;
# 2 "stdParser.mly"
(********************************************************)
(*                                                      *)
(*  Copyright 2006 Wojciech Jaworski.                   *)
(*                                                      *)
(*  All rights reserved.                                *)
(*                                                      *)
(********************************************************)
# 17 "stdParser.ml"
let yytransl_const = [|
    0 (* EOF *);
  258 (* ESC *);
  259 (* NEWLINE *);
    0|]

let yytransl_block = [|
  257 (* TERM *);
    0|]

let yylhs = "\255\255\
\002\000\003\000\004\000\004\000\004\000\006\000\006\000\007\000\
\007\000\001\000\001\000\005\000\005\000\000\000\000\000\000\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\002\000\001\000\003\000\002\000\002\000\
\001\000\002\000\001\000\001\000\002\000\002\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
\014\000\000\000\000\000\015\000\002\000\016\000\005\000\000\000\
\017\000\013\000\010\000\000\000\001\000\009\000\004\000\000\000\
\003\000\007\000\000\000\008\000\006\000"

let yydgoto = "\005\000\
\019\000\012\000\014\000\017\000\024\000\021\000\025\000"

let yysindex = "\007\000\
\004\000\003\255\011\255\003\000\000\000\017\255\000\000\000\000\
\000\000\004\000\014\255\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\
\000\000\000\000\014\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\255\255\000\000\000\000\000\000\006\000\243\255\238\255"

let yytablesize = 263
let yytable = "\009\000\
\007\000\027\000\015\000\007\000\011\000\028\000\010\000\001\000\
\002\000\003\000\004\000\018\000\013\000\029\000\023\000\010\000\
\020\000\006\000\026\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\022\000\008\000\006\000\016\000\008\000"

let yycheck = "\001\000\
\000\000\020\000\000\000\000\000\002\001\024\000\001\000\001\000\
\002\000\003\000\004\000\006\000\002\001\027\000\016\000\010\000\
\003\001\001\001\020\000\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\001\001\003\001\003\001"

let yynames_const = "\
  EOF\000\
  ESC\000\
  NEWLINE\000\
  "

let yynames_block = "\
  TERM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'three_dim_rec) in
    Obj.repr(
# 26 "stdParser.mly"
                             ( _2 )
# 150 "stdParser.ml"
               : string list list list))
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "stdParser.mly"
               ( () )
# 156 "stdParser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'etabl) in
    Obj.repr(
# 29 "stdParser.mly"
                           ( _2 )
# 163 "stdParser.ml"
               : string list list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string list list) in
    Obj.repr(
# 30 "stdParser.mly"
                           ( _2 )
# 170 "stdParser.ml"
               : string list list))
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "stdParser.mly"
                           ( raise End_of_file )
# 176 "stdParser.ml"
               : string list list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'etabl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'three_dim_rec) in
    Obj.repr(
# 33 "stdParser.mly"
                                           ( _2 :: _3 )
# 184 "stdParser.ml"
               : 'three_dim_rec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string list list) in
    Obj.repr(
# 34 "stdParser.mly"
                                           ( [_2] )
# 191 "stdParser.ml"
               : 'three_dim_rec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'etabl) in
    Obj.repr(
# 36 "stdParser.mly"
                   ( _1 :: _2 )
# 199 "stdParser.ml"
               : 'etabl))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "stdParser.mly"
                   ( [] )
# 205 "stdParser.ml"
               : 'etabl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string list list) in
    Obj.repr(
# 39 "stdParser.mly"
                   ( _1 :: _2 )
# 213 "stdParser.ml"
               : string list list))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "stdParser.mly"
                   ( [] )
# 219 "stdParser.ml"
               : string list list))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "stdParser.mly"
                  ( [] )
# 225 "stdParser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 43 "stdParser.mly"
                  ( _1 :: _2 )
# 233 "stdParser.ml"
               : string list))
(* Entry table *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry three_dim *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry beginning *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry next_table *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let table (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : string list list)
let three_dim (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : string list list list)
let beginning (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : unit)
let next_table (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : string list list)
;;
# 47 "stdParser.mly"

# 272 "stdParser.ml"
