# 1 "xmlLexer.mll"
 
(********************************************************)
(*                                                      *)
(*  Copyright 2007, 2008 Wojciech Jaworski.             *)
(*                                                      *)
(*  All rights reserved.                                *)
(*                                                      *)
(********************************************************)

exception Fail of string
open XmlParser

let buf = Buffer.create 1000

# 17 "xmlLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\205\255\206\255\001\000\002\000\000\000\001\000\001\000\
    \229\255\010\000\006\000\022\000\023\000\009\000\028\000\014\000\
    \012\000\016\000\248\255\249\255\250\255\251\255\015\000\253\255\
    \254\255\255\255\015\000\019\000\017\000\021\000\000\000\035\000\
    \033\000\033\000\041\000\033\000\048\000\037\000\046\000\208\255\
    \051\000\037\000\046\000\001\000\050\000\052\000\050\000\053\000\
    \245\255\056\000\040\000\043\000\053\000\061\000\043\000\045\000\
    \061\000\244\255\068\000\055\000\053\000\052\000\066\000\068\000\
    \064\000\071\000\074\000\056\000\072\000\242\255\057\000\067\000\
    \079\000\061\000\077\000\084\000\072\000\076\000\081\000\081\000\
    \068\000\220\255\084\000\084\000\073\000\219\255\069\000\076\000\
    \076\000\098\000\082\000\081\000\095\000\097\000\093\000\100\000\
    \103\000\085\000\101\000\243\255\102\000\090\000\226\255\097\000\
    \240\255\089\000\106\000\241\255\110\000\100\000\109\000\090\000\
    \104\000\117\000\099\000\111\000\107\000\115\000\239\255\102\000\
    \105\000\213\255\123\000\111\000\115\000\232\255\123\000\231\255\
    \126\000\121\000\125\000\123\000\130\000\223\255\218\255\131\000\
    \121\000\119\000\122\000\118\000\121\000\210\255\228\255\121\000\
    \123\000\123\000\126\000\136\000\132\000\140\000\237\255\136\000\
    \134\000\130\000\132\000\236\255\147\000\134\000\155\000\149\000\
    \147\000\145\000\153\000\145\000\160\000\149\000\158\000\207\255\
    \151\000\161\000\153\000\162\000\009\000\234\255\235\255\167\000\
    \157\000\224\255\165\000\227\255\159\000\167\000\153\000\169\000\
    \222\255\155\000\173\000\169\000\173\000\176\000\182\000\170\000\
    \174\000\179\000\160\000\173\000\185\000\175\000\179\000\217\255\
    \186\000\173\000\216\255\187\000\187\000\176\000\215\255\188\000\
    \178\000\194\000\212\255\185\000\191\000\197\000\200\000\184\000\
    \211\255\201\000\207\000\195\000\199\000\195\000\205\000\209\255\
    \041\001\248\255\017\001\043\001\249\255\193\000\195\000\196\000\
    \204\000\203\000\203\000\014\000\254\255\202\000\015\000\251\255\
    \016\000\253\255\017\000\252\255\207\000\203\000\018\000\250\255\
    \030\000\016\001\029\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\050\000\050\000\050\000\050\000\050\000\
    \255\255\050\000\050\000\050\000\025\000\050\000\050\000\050\000\
    \050\000\050\000\255\255\255\255\255\255\255\255\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\008\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\034\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \017\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\030\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\022\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\041\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \227\000\000\000\255\255\227\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\174\000\173\000\021\000\018\000\020\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\236\000\239\000\241\000\243\000\247\000\249\000\249\000\
    \249\000\249\000\249\000\249\000\249\000\249\000\249\000\249\000\
    \251\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
    \044\000\015\000\185\000\017\000\007\000\003\000\180\000\016\000\
    \207\000\011\000\103\000\168\000\014\000\006\000\009\000\217\000\
    \004\000\049\000\010\000\012\000\211\000\152\000\013\000\005\000\
    \008\000\169\000\142\000\151\000\109\000\086\000\040\000\026\000\
    \111\000\027\000\050\000\028\000\143\000\087\000\029\000\110\000\
    \030\000\032\000\033\000\113\000\108\000\034\000\035\000\036\000\
    \112\000\037\000\038\000\039\000\041\000\042\000\043\000\045\000\
    \046\000\047\000\048\000\058\000\051\000\052\000\053\000\054\000\
    \055\000\056\000\057\000\060\000\070\000\061\000\062\000\063\000\
    \064\000\065\000\066\000\067\000\068\000\069\000\071\000\072\000\
    \073\000\074\000\075\000\076\000\078\000\082\000\079\000\080\000\
    \081\000\059\000\077\000\083\000\084\000\085\000\100\000\088\000\
    \089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
    \097\000\098\000\099\000\101\000\102\000\105\000\106\000\107\000\
    \135\000\134\000\128\000\104\000\126\000\122\000\114\000\119\000\
    \116\000\117\000\118\000\120\000\121\000\123\000\124\000\125\000\
    \127\000\129\000\130\000\131\000\132\000\133\000\136\000\115\000\
    \137\000\138\000\139\000\140\000\141\000\144\000\145\000\146\000\
    \147\000\148\000\149\000\150\000\156\000\153\000\154\000\155\000\
    \157\000\158\000\159\000\160\000\161\000\162\000\163\000\164\000\
    \002\000\165\000\166\000\167\000\178\000\171\000\175\000\172\000\
    \176\000\177\000\179\000\181\000\182\000\183\000\184\000\186\000\
    \187\000\188\000\189\000\170\000\190\000\191\000\193\000\203\000\
    \200\000\195\000\196\000\197\000\192\000\194\000\198\000\199\000\
    \201\000\202\000\204\000\205\000\206\000\208\000\209\000\210\000\
    \212\000\213\000\214\000\215\000\216\000\218\000\219\000\220\000\
    \221\000\222\000\223\000\255\255\228\000\255\255\244\000\242\000\
    \240\000\234\000\237\000\235\000\233\000\238\000\245\000\246\000\
    \249\000\249\000\249\000\249\000\249\000\249\000\249\000\249\000\
    \249\000\249\000\000\000\225\000\000\000\255\255\000\000\226\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\232\000\000\000\000\000\000\000\000\000\000\000\
    \230\000\000\000\000\000\000\000\000\000\231\000\000\000\000\000\
    \000\000\000\000\229\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\172\000\172\000\000\000\000\000\000\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\235\000\238\000\240\000\242\000\246\000\248\000\248\000\
    \248\000\248\000\248\000\248\000\248\000\248\000\248\000\248\000\
    \250\000\255\255\255\255\255\255\255\255\255\255\255\255\030\000\
    \043\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\
    \005\000\000\000\013\000\009\000\000\000\000\000\000\000\003\000\
    \000\000\015\000\000\000\000\000\004\000\010\000\000\000\000\000\
    \000\000\009\000\011\000\010\000\012\000\014\000\016\000\017\000\
    \012\000\026\000\015\000\027\000\011\000\014\000\028\000\012\000\
    \029\000\031\000\032\000\012\000\012\000\033\000\034\000\035\000\
    \012\000\036\000\037\000\038\000\040\000\041\000\042\000\044\000\
    \045\000\046\000\047\000\049\000\050\000\051\000\052\000\053\000\
    \054\000\055\000\056\000\058\000\059\000\060\000\061\000\062\000\
    \063\000\064\000\065\000\066\000\067\000\068\000\070\000\071\000\
    \072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
    \080\000\058\000\076\000\082\000\083\000\084\000\086\000\087\000\
    \088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
    \096\000\097\000\098\000\100\000\101\000\103\000\105\000\106\000\
    \108\000\109\000\110\000\103\000\111\000\112\000\113\000\114\000\
    \115\000\116\000\117\000\119\000\120\000\122\000\123\000\124\000\
    \126\000\128\000\129\000\130\000\131\000\132\000\135\000\113\000\
    \136\000\137\000\138\000\139\000\140\000\143\000\144\000\145\000\
    \146\000\147\000\148\000\149\000\151\000\152\000\153\000\154\000\
    \156\000\157\000\158\000\159\000\160\000\161\000\162\000\163\000\
    \000\000\164\000\165\000\166\000\168\000\169\000\170\000\171\000\
    \175\000\176\000\178\000\180\000\181\000\182\000\183\000\185\000\
    \186\000\187\000\188\000\169\000\189\000\190\000\191\000\192\000\
    \193\000\194\000\195\000\196\000\191\000\191\000\197\000\198\000\
    \200\000\201\000\203\000\204\000\205\000\207\000\208\000\209\000\
    \211\000\212\000\213\000\214\000\215\000\217\000\218\000\219\000\
    \220\000\221\000\222\000\224\000\226\000\227\000\229\000\230\000\
    \231\000\232\000\233\000\234\000\232\000\237\000\244\000\245\000\
    \249\000\249\000\249\000\249\000\249\000\249\000\249\000\249\000\
    \249\000\249\000\255\255\224\000\255\255\227\000\255\255\224\000\
    \255\255\227\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\226\000\255\255\255\255\255\255\255\255\255\255\
    \226\000\255\255\255\255\255\255\255\255\226\000\255\255\255\255\
    \255\255\255\255\226\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\224\000\255\255\227\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 17 "xmlLexer.mll"
                   ( token lexbuf )
# 281 "xmlLexer.ml"

  | 1 ->
# 18 "xmlLexer.mll"
                   ( token lexbuf )
# 286 "xmlLexer.ml"

  | 2 ->
# 19 "xmlLexer.mll"
                   ( Buffer.clear buf; string lexbuf )
# 291 "xmlLexer.ml"

  | 3 ->
# 20 "xmlLexer.mll"
                   ( NUM (Lexing.lexeme lexbuf) )
# 296 "xmlLexer.ml"

  | 4 ->
# 21 "xmlLexer.mll"
                   ( LT )
# 301 "xmlLexer.ml"

  | 5 ->
# 22 "xmlLexer.mll"
                   ( GT )
# 306 "xmlLexer.ml"

  | 6 ->
# 23 "xmlLexer.mll"
                   ( SL )
# 311 "xmlLexer.ml"

  | 7 ->
# 24 "xmlLexer.mll"
                   ( EQ )
# 316 "xmlLexer.ml"

  | 8 ->
# 25 "xmlLexer.mll"
                   ( CORPUS )
# 321 "xmlLexer.ml"

  | 9 ->
# 26 "xmlLexer.mll"
                   ( GRAPH )
# 326 "xmlLexer.ml"

  | 10 ->
# 27 "xmlLexer.mll"
                   ( GRAPH_EDGE )
# 331 "xmlLexer.ml"

  | 11 ->
# 28 "xmlLexer.mll"
                   ( ATTRIBUTE )
# 336 "xmlLexer.ml"

  | 12 ->
# 29 "xmlLexer.mll"
                   ( LIST_PREDICATE )
# 341 "xmlLexer.ml"

  | 13 ->
# 30 "xmlLexer.mll"
                   ( ACC_PREDICATE )
# 346 "xmlLexer.ml"

  | 14 ->
# 31 "xmlLexer.mll"
                   ( VALUE )
# 351 "xmlLexer.ml"

  | 15 ->
# 32 "xmlLexer.mll"
                   ( VAR )
# 356 "xmlLexer.ml"

  | 16 ->
# 33 "xmlLexer.mll"
                   ( STRING )
# 361 "xmlLexer.ml"

  | 17 ->
# 34 "xmlLexer.mll"
                   ( INT )
# 366 "xmlLexer.ml"

  | 18 ->
# 35 "xmlLexer.mll"
                   ( INT_STRING )
# 371 "xmlLexer.ml"

  | 19 ->
# 36 "xmlLexer.mll"
                   ( ROOTS )
# 376 "xmlLexer.ml"

  | 20 ->
# 37 "xmlLexer.mll"
                   ( NODE1 )
# 381 "xmlLexer.ml"

  | 21 ->
# 38 "xmlLexer.mll"
                   ( NODE2 )
# 386 "xmlLexer.ml"

  | 22 ->
# 39 "xmlLexer.mll"
                   ( NODE )
# 391 "xmlLexer.ml"

  | 23 ->
# 40 "xmlLexer.mll"
                   ( SYMBOL )
# 396 "xmlLexer.ml"

  | 24 ->
# 41 "xmlLexer.mll"
                   ( SIZE )
# 401 "xmlLexer.ml"

  | 25 ->
# 42 "xmlLexer.mll"
                   ( S )
# 406 "xmlLexer.ml"

  | 26 ->
# 43 "xmlLexer.mll"
                   ( X )
# 411 "xmlLexer.ml"

  | 27 ->
# 44 "xmlLexer.mll"
                   ( ID )
# 416 "xmlLexer.ml"

  | 28 ->
# 45 "xmlLexer.mll"
                   ( NAME )
# 421 "xmlLexer.ml"

  | 29 ->
# 46 "xmlLexer.mll"
                   ( LAYER )
# 426 "xmlLexer.ml"

  | 30 ->
# 47 "xmlLexer.mll"
                   ( RULES )
# 431 "xmlLexer.ml"

  | 31 ->
# 48 "xmlLexer.mll"
                   ( NORMAL )
# 436 "xmlLexer.ml"

  | 32 ->
# 49 "xmlLexer.mll"
                   ( SPECIFIC )
# 441 "xmlLexer.ml"

  | 33 ->
# 50 "xmlLexer.mll"
                   ( DELETE )
# 446 "xmlLexer.ml"

  | 34 ->
# 51 "xmlLexer.mll"
                   ( ACCUMULATE )
# 451 "xmlLexer.ml"

  | 35 ->
# 52 "xmlLexer.mll"
                    ( ACCUMULATE_LEFT )
# 456 "xmlLexer.ml"

  | 36 ->
# 53 "xmlLexer.mll"
                     ( ACCUMULATE_RIGHT )
# 461 "xmlLexer.ml"

  | 37 ->
# 54 "xmlLexer.mll"
                   ( SEM )
# 466 "xmlLexer.ml"

  | 38 ->
# 55 "xmlLexer.mll"
                   ( MATCHED_SYMBOL )
# 471 "xmlLexer.ml"

  | 39 ->
# 56 "xmlLexer.mll"
                   ( MATCHED_LEFT )
# 476 "xmlLexer.ml"

  | 40 ->
# 57 "xmlLexer.mll"
                   ( MATCHED_RIGHT )
# 481 "xmlLexer.ml"

  | 41 ->
# 58 "xmlLexer.mll"
                   ( MATCHED )
# 486 "xmlLexer.ml"

  | 42 ->
# 59 "xmlLexer.mll"
                   ( STATUS )
# 491 "xmlLexer.ml"

  | 43 ->
# 60 "xmlLexer.mll"
                   ( WHITE )
# 496 "xmlLexer.ml"

  | 44 ->
# 61 "xmlLexer.mll"
                   ( PROJECT )
# 501 "xmlLexer.ml"

  | 45 ->
# 62 "xmlLexer.mll"
                   ( SUBCORPUS )
# 506 "xmlLexer.ml"

  | 46 ->
# 63 "xmlLexer.mll"
                      ( END_LINE )
# 511 "xmlLexer.ml"

  | 47 ->
# 64 "xmlLexer.mll"
                   ( CORPUS_FILENAME )
# 516 "xmlLexer.ml"

  | 48 ->
# 65 "xmlLexer.mll"
                   ( RULES_FILENAME )
# 521 "xmlLexer.ml"

  | 49 ->
# 66 "xmlLexer.mll"
                              ( EOF )
# 526 "xmlLexer.ml"

  | 50 ->
# 67 "xmlLexer.mll"
                              ( raise (Fail ("lexer: illegal symbol: " ^ (Lexing.lexeme lexbuf) ^ " at " ^ (string_of_int (Lexing.lexeme_start lexbuf)))))
# 531 "xmlLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 224
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 69 "xmlLexer.mll"
                          ( Buffer.add_string buf (Lexing.lexeme lexbuf); string lexbuf )
# 542 "xmlLexer.ml"

  | 1 ->
# 70 "xmlLexer.mll"
            ( Buffer.add_char buf '&'; string lexbuf )
# 547 "xmlLexer.ml"

  | 2 ->
# 71 "xmlLexer.mll"
           ( Buffer.add_char buf '<'; string lexbuf )
# 552 "xmlLexer.ml"

  | 3 ->
# 72 "xmlLexer.mll"
           ( Buffer.add_char buf '>'; string lexbuf )
# 557 "xmlLexer.ml"

  | 4 ->
# 73 "xmlLexer.mll"
             ( Buffer.add_char buf '\''; string lexbuf )
# 562 "xmlLexer.ml"

  | 5 ->
# 74 "xmlLexer.mll"
             ( Buffer.add_char buf '"'; string lexbuf )
# 567 "xmlLexer.ml"

  | 6 ->
# 75 "xmlLexer.mll"
        ( Buffer.add_char buf (char_code lexbuf); string lexbuf )
# 572 "xmlLexer.ml"

  | 7 ->
# 76 "xmlLexer.mll"
      ( VAL (Buffer.contents buf) )
# 577 "xmlLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and char_code lexbuf =
    __ocaml_lex_char_code_rec lexbuf 248
and __ocaml_lex_char_code_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 78 "xmlLexer.mll"
                  ( let x = int_of_string (Lexing.lexeme lexbuf) in char_code2 lexbuf; Char.chr x )
# 588 "xmlLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_char_code_rec lexbuf __ocaml_lex_state

and char_code2 lexbuf =
    __ocaml_lex_char_code2_rec lexbuf 250
and __ocaml_lex_char_code2_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 80 "xmlLexer.mll"
        ( () )
# 599 "xmlLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_char_code2_rec lexbuf __ocaml_lex_state

;;

